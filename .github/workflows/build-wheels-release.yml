name: Build Wheels & Release

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Release? 1 = yes, 0 = no'
        default: '1'
        required: true
        type: string

permissions:
  contents: write

jobs:
  build_wheels:
    name: ${{ matrix.os }} Python=${{ matrix.pyver }} CUDA=${{ matrix.cuda }} ROCm=${{ matrix.rocm }} Torch=${{ matrix.torch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        # Ubuntu 22.04 CUDA
        - { artname: 'wheel', os: ubuntu-22.04, pyver: '3.11', cuda: '12.4.1', rocm:    '', torch: '2.4.0', cudaarch: '8.9' }
        - { artname: 'wheel', os: ubuntu-22.04, pyver: '3.12', cuda: '12.4.1', rocm:    '', torch: '2.4.0', cudaarch: '8.9' }

        # Windows 2022 CUDA
        - { artname: 'wheel', os: windows-2022, pyver: '3.11', cuda: '12.4.1', rocm:    '', torch: '2.4.0', cudaarch: '8.9' }
        - { artname: 'wheel', os: windows-2022, pyver: '3.12', cuda: '12.4.1', rocm:    '', torch: '2.4.0', cudaarch: '8.9' }

        # Extra Torch 2.2 wheels for Windows 2022 until PyTorch resolves the shm.dll issue
        #- { artname: 'wheel', os: windows-2022, pyver: '3.11', cuda: '12.1.0', rocm:    '', torch: '2.2.0', cudaarch: '8.9' }
        #- { artname: 'wheel', os: windows-2022, pyver: '3.12', cuda: '12.1.0', rocm:    '', torch: '2.2.0', cudaarch: '8.9' }
        # Extra wheel for HF spaces
        #- { artname: 'wheel', os: ubuntu-22.04, pyver: '3.10', cuda: '12.1.0', rocm:    '', torch: '2.2.2', cudaarch: '8.9' }

    defaults:
      run:
        shell: pwsh

    steps:
      # Free disk space
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@v1.3.1
        if: runner.os == 'Linux'
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          swap-storage: true

      # Free delete old release
      - name: Delete
        uses: dev-drprasad/delete-tag-and-release@v1.1
        with:
          tag_name: v0.2.3
          delete_release: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repo: choronz/exllama
      
      # Setup Python
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.pyver }}

      # Get version string from package
      - name: Get version string
        id: package_version
        run: | 
          $versionString = Get-Content $(Join-Path 'exllamav2' 'version.py') -raw
          if ($versionString -match '__version__ = "(\d+\.(?:\d+\.?(?:dev\d+)?)*)"') 
          {
            Write-Output $('::notice file=build-wheels-release.yml,line=200,title=Package Version::Detected package version is: {0}' -f $Matches[1])
            Write-Output "PACKAGE_VERSION=$($Matches[1])" >> "$env:GITHUB_OUTPUT"
          }
          else
          {
            Write-Output '::error file=build-wheels-release.yml,line=203::Could not parse version from exllamav2/version.py! You must upload wheels manually!'
            Write-Output "PACKAGE_VERSION=None" >> "$env:GITHUB_OUTPUT"
          }
          
      # Pin VS build tools to 17.9 so builds won't fail
      - name: Install VS2022 BuildTools 17.9.7
        run: choco install -y visualstudio2022buildtools --version=117.9.7.0 --params "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --installChannelUri https://aka.ms/vs/17/release/180911598_-255012421/channel"
        if: runner.os == 'Windows'

      # Build for CUDA
      - name: Setup Mamba
        if: matrix.cuda != ''
        uses: conda-incubator/setup-miniconda@v2.3.0
        with:
          activate-environment: "exllama"
          python-version: ${{ matrix.pyver }}
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          add-pip-as-python-dependency: true
          auto-activate-base: false

      - name: Build for CUDA
        if: matrix.cuda != ''
        run: |
          # --- Spawn the VS shell
          if ($IsWindows) {
            Import-Module 'C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\Microsoft.VisualStudio.DevShell.dll'
            Enter-VsDevShell -VsInstallPath 'C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools' -DevCmdArguments '-arch=x64 -host_arch=x64'
            $env:DISTUTILS_USE_SDK=1
          }
  
          # --- Install CUDA using Conda
          $cudaVersion = '${{ matrix.cuda }}'
          $cudaVersionPytorch = '${{ matrix.cuda }}'.Remove('${{ matrix.cuda }}'.LastIndexOf('.')).Replace('.','')

          $env:MAMBA_NO_LOW_SPEED_LIMIT = 1
          mamba install -y -c nvidia/label/cuda-$cudaVersion cuda-toolkit cuda-runtime

          if (!(mamba list cuda)[-1].contains('cuda')) {sleep -s 10; mamba install -y 'cuda' $cudaVersion}
          if (!(mamba list cuda)[-1].contains('cuda')) {throw 'CUDA Toolkit failed to install!'}

          $env:CUDA_PATH = $env:CONDA_PREFIX
          $env:CUDA_HOME = $env:CONDA_PREFIX
          if ($IsLinux) {$env:LD_LIBRARY_PATH = $env:CONDA_PREFIX + '/lib:' + $env:LD_LIBRARY_PATH}
          
          # --- Install dependencies
          
          python -m ensurepip --upgrade
          python -m pip install torch==${{ matrix.torch }} --index-url https://download.pytorch.org/whl/cu$cudaVersionPytorch
          python -m pip install --upgrade setuptools==69.5.1 build wheel safetensors sentencepiece ninja

          # --- Build wheel
                  
          $BUILDTAG = "+cu$cudaVersionPytorch-torch${{ matrix.torch }}"
          $env:TORCH_CUDA_ARCH_LIST = '${{ matrix.cudaarch }}'
          python -m build -n --wheel -C--build-option=egg_info "-C--build-option=--tag-build=$BUILDTAG"

      # Build sdist
      - name: Build sdist
        if: matrix.cuda == '' && matrix.rocm == ''
        run: |
          # --- Spawn the VS shell
          if ($IsWindows) {
            Import-Module 'C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\Microsoft.VisualStudio.DevShell.dll'
            Enter-VsDevShell -VsInstallPath 'C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools' -DevCmdArguments '-arch=x64 -host_arch=x64'
            $env:DISTUTILS_USE_SDK=1
          }

          # --- Install dependencies
          
          python -m pip install torch==${{ matrix.torch }} --index-url https://download.pytorch.org/whl/cpu
          python -m pip install build wheel ninja

          # --- Build wheel
          $env:EXLLAMA_NOCOMPILE=0
          python -m build -n

      # Upload files
      - uses: actions/upload-artifact@v3
        if: matrix.artname == 'wheel'
        with:
          name: 'wheel'
          path: ./dist/*

      - uses: actions/upload-artifact@v3
        if: matrix.artname == 'sdist'
        with:
          name: 'sdist'
          path: ./dist/*

      - name: Upload files to GitHub release
        if: steps.package_version.outputs.PACKAGE_VERSION != 'None' && inputs.release == '1'
        uses: svenstaro/upload-release-action@2.9.0
        with:
          file: ./dist/*.whl
          tag: ${{ format('v{0}', steps.package_version.outputs.PACKAGE_VERSION) }}
          file_glob: true
          overwrite: true
          release_name: ${{ steps.package_version.outputs.PACKAGE_VERSION }}
